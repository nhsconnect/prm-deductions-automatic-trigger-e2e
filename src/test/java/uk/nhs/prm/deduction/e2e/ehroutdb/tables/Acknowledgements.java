/*
 * This file is generated by jOOQ.
 */
package uk.nhs.prm.deduction.e2e.ehroutdb.tables;


import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import uk.nhs.prm.deduction.e2e.ehroutdb.Keys;
import uk.nhs.prm.deduction.e2e.ehroutdb.Public;
import uk.nhs.prm.deduction.e2e.ehroutdb.tables.records.AcknowledgementsRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row9;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Acknowledgements extends TableImpl<AcknowledgementsRecord> {

    private static final long serialVersionUID = -1409465028;

    /**
     * The reference instance of <code>public.acknowledgements</code>
     */
    public static final Acknowledgements ACKNOWLEDGEMENTS = new Acknowledgements();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AcknowledgementsRecord> getRecordType() {
        return AcknowledgementsRecord.class;
    }

    /**
     * The column <code>public.acknowledgements.message_id</code>.
     */
    public final TableField<AcknowledgementsRecord, UUID> MESSAGE_ID = createField(DSL.name("message_id"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.acknowledgements.acknowledgement_type_code</code>.
     */
    public final TableField<AcknowledgementsRecord, String> ACKNOWLEDGEMENT_TYPE_CODE = createField(DSL.name("acknowledgement_type_code"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.acknowledgements.acknowledgement_detail</code>.
     */
    public final TableField<AcknowledgementsRecord, String> ACKNOWLEDGEMENT_DETAIL = createField(DSL.name("acknowledgement_detail"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.acknowledgements.service</code>.
     */
    public final TableField<AcknowledgementsRecord, String> SERVICE = createField(DSL.name("service"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.acknowledgements.referenced_message_id</code>.
     */
    public final TableField<AcknowledgementsRecord, String> REFERENCED_MESSAGE_ID = createField(DSL.name("referenced_message_id"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.acknowledgements.message_ref</code>.
     */
    public final TableField<AcknowledgementsRecord, String> MESSAGE_REF = createField(DSL.name("message_ref"), org.jooq.impl.SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.acknowledgements.created_at</code>.
     */
    public final TableField<AcknowledgementsRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.acknowledgements.updated_at</code>.
     */
    public final TableField<AcknowledgementsRecord, OffsetDateTime> UPDATED_AT = createField(DSL.name("updated_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * The column <code>public.acknowledgements.deleted_at</code>.
     */
    public final TableField<AcknowledgementsRecord, OffsetDateTime> DELETED_AT = createField(DSL.name("deleted_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE, this, "");

    /**
     * Create a <code>public.acknowledgements</code> table reference
     */
    public Acknowledgements() {
        this(DSL.name("acknowledgements"), null);
    }

    /**
     * Create an aliased <code>public.acknowledgements</code> table reference
     */
    public Acknowledgements(String alias) {
        this(DSL.name(alias), ACKNOWLEDGEMENTS);
    }

    /**
     * Create an aliased <code>public.acknowledgements</code> table reference
     */
    public Acknowledgements(Name alias) {
        this(alias, ACKNOWLEDGEMENTS);
    }

    private Acknowledgements(Name alias, Table<AcknowledgementsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Acknowledgements(Name alias, Table<AcknowledgementsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Acknowledgements(Table<O> child, ForeignKey<O, AcknowledgementsRecord> key) {
        super(child, key, ACKNOWLEDGEMENTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<AcknowledgementsRecord> getPrimaryKey() {
        return Keys.ACKNOWLEDGEMENTS_PKEY;
    }

    @Override
    public List<UniqueKey<AcknowledgementsRecord>> getKeys() {
        return Arrays.<UniqueKey<AcknowledgementsRecord>>asList(Keys.ACKNOWLEDGEMENTS_PKEY);
    }

    @Override
    public Acknowledgements as(String alias) {
        return new Acknowledgements(DSL.name(alias), this);
    }

    @Override
    public Acknowledgements as(Name alias) {
        return new Acknowledgements(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Acknowledgements rename(String name) {
        return new Acknowledgements(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Acknowledgements rename(Name name) {
        return new Acknowledgements(name, null);
    }

    // -------------------------------------------------------------------------
    // Row9 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row9<UUID, String, String, String, String, String, OffsetDateTime, OffsetDateTime, OffsetDateTime> fieldsRow() {
        return (Row9) super.fieldsRow();
    }
}
